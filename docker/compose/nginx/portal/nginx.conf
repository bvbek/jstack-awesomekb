worker_processes  1;

events {
  worker_connections  1024;
}

http {

  # Extending the size of this variable since it may error otherwise
  # when using long domain names like default Amazon AWS ones
  server_names_hash_bucket_size  128;

  # Default Server, it will swallow any requests not matching any of the specific
  # server below. This way, we avoid direct access to the server via
  # direct Public IP or Cloud DNS (like an Amazon AWS public DNS name)
  server {
    listen 443 ssl default_server;
    server_name _;
    return 404;

    ssl on;
    ssl_certificate     /etc/ssl/server.crt;
    ssl_certificate_key /etc/ssl/server.key;
  }


  server {
    listen 443 ssl;
    server_name     login.jstack.com;

    resolver 127.0.0.11 ipv6=off;
    set $backend_endpoint http://inca-authelia:8081;

    ssl on;
    ssl_certificate     /etc/ssl/server.crt;
    ssl_certificate_key /etc/ssl/server.key;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN";

    # Serves the portal application.
    location / {
        proxy_pass        $backend_endpoint/index.html;
    }

    location /static {
        proxy_pass        $backend_endpoint;
    }

    # Serve the backend API for the portal.
    location /api {
        proxy_set_header  Host $http_host;
        proxy_set_header  X-Original-URI $request_uri;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-Proto $scheme;
        # Needed for network ACLs to work. It appends the IP of the client to the list of IPs
        # and allows Authelia to use it to match the network-based ACLs.
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_intercept_errors on;

        proxy_pass        $backend_endpoint;
    }
  }

  # Serves the Knowledge Base
    server {
        listen 443 ssl;
        server_name     public.jstack.com
                        secops.jstack.com;

        resolver 127.0.0.11 ipv6=off;
        set $upstream_verify http://inca-authelia:8081/api/verify;
        set $upstream_endpoint http://jstack-nginx-backend;
        set $upstream_headers http://httpbin:8000/headers;

        ssl_certificate     /etc/ssl/server.crt;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        # Reverse proxy to the backend. It is protected by Authelia by forwarding authorization checks
        # to the virtual endpoint introduced by nginx and declared in the next block.
        location / {
            auth_request /auth_verify;

            auth_request_set $redirect $upstream_http_redirect;

            auth_request_set $user $upstream_http_remote_user;
            proxy_set_header X-Forwarded-User $user;

            auth_request_set $groups $upstream_http_remote_groups;
            proxy_set_header Remote-Groups $groups;

            proxy_set_header Host $http_host;

            # Authelia relies on Proxy-Authorization header to authenticate in basic auth.
            # but for the sake of simplicity (because Authorization in supported in most
            # clients) we take Authorization from the frontend and rewrite it to
            # Proxy-Authorization before sending it to Authelia.
            proxy_set_header            Proxy-Authorization $http_authorization;

            error_page 401 =302 https://login.jstack.com/#/?rd=$redirect;

            proxy_pass        $upstream_endpoint;
        }

        # Virtual endpoint forwarding requests to Authelia server.
        location /auth_verify {
            internal;
            proxy_set_header            Host $http_host;

            proxy_set_header            X-Original-URI $request_uri;
            proxy_set_header            X-Original-URL $scheme://$http_host$request_uri;
            proxy_set_header            X-Real-IP $remote_addr;
            proxy_set_header            X-Forwarded-Proto $scheme;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

            # Authelia can receive Proxy-Authorization to authenticate however most of the clients
            # support Authorization instead. Therefore we rewrite Authorization into Proxy-Authorization.
            proxy_set_header            Proxy-Authorization $http_authorization;

            proxy_pass_request_body     off;
            proxy_set_header            Content-Length "";

            proxy_pass        $upstream_verify;
        }

        # Used by suites to test the forwarded users and groups headers produced by Authelia.
        location /headers {
            auth_request /auth_verify;

            auth_request_set $redirect $upstream_http_redirect;

            auth_request_set $user $upstream_http_remote_user;
            proxy_set_header Custom-Forwarded-User $user;

            auth_request_set $groups $upstream_http_remote_groups;
            proxy_set_header Custom-Forwarded-Groups $groups;

            error_page 401 =302 https://login.jstack.com/#/?rd=$redirect;

            proxy_pass        $upstream_headers;
        }
    }

  server {
    listen 4443;
    #server_name     mailcatcher.jstack.com;
    #server_name localhost;

    resolver 127.0.0.11 ipv6=off;
    set $upstream_endpoint http://smtp:1080;

    ssl on;
    ssl_certificate     /etc/ssl/server.crt;
    ssl_certificate_key /etc/ssl/server.key;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN";

    location / {
      auth_basic           “MailCatcher";
      auth_basic_user_file /usr/share/nginx/.htpasswd;

      proxy_set_header  Host $http_host;
      proxy_set_header  X-Original-URI $request_uri;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_intercept_errors on;

      proxy_pass        $upstream_endpoint;

      if ($request_method !~ ^(POST)$){
        error_page 401 = /error/401;
        error_page 403 = /error/403;
        error_page 404 = /error/404;
      }
    }
  }

  server {
    listen 5443;
    #server_name     ldapadmin.jstack.com;

    resolver 127.0.0.11 ipv6=off;
    set $upstream_endpoint https://jstack-ldap-admin;

    ssl on;
    ssl_certificate     /etc/ssl/server.crt;
    ssl_certificate_key /etc/ssl/server.key;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN";

    location / {
      auth_basic           "LDAP Admin";
      auth_basic_user_file /usr/share/nginx/.htpasswd;

      proxy_set_header  Host $http_host;
      proxy_set_header  X-Original-URI $request_uri;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_intercept_errors on;

      proxy_pass        $upstream_endpoint;

      if ($request_method !~ ^(POST)$){
        error_page 401 = /error/401;
        error_page 403 = /error/403;
        error_page 404 = /error/404;
      }
    }
  }

}
