###############################################################
#                   Authelia configuration                    #
###############################################################

# The port to listen on
port: 80

# Log level
#
# Level of verbosity for logs
logs_level: debug

# Default redirection URL
#
# If user tries to authenticate without any referer, Authelia
# does not know where to redirect the user to at the end of the
# authentication process.
# This parameter allows you to specify the default redirection
# URL Authelia will use in such a case.
#
# Note: this parameter is optional. If not provided, user won't
# be redirected upon successful authentication.
default_redirection_url: '{{ .Values.authelia_conf.default_redirection_url }}'

# The authentication backend to use for verifying user passwords
# and retrieve information such as email address and groups
# users belong to.
#
# There are two supported backends: `ldap` and `file`.
authentication_backend:
  # LDAP backend configuration.
  #
  # This backend allows Authelia to be scaled to more
  # than one instance and therefore is recommended for
  # production.
  ldap:
    # The url of the ldap server
    url: '{{ printf "ldap://%s-openldap.%s.svc.cluster.local:389" (.Release.Name) (.Release.Namespace) }}'

  
    # The base dn for every entries
    base_dn: dc=eideon,dc=com
  
    # An additional dn to define the scope to all users
    additional_users_dn: ou=users
  
    # The users filter used to find the user DN
    # {0} is a matcher replaced by username.
    # 'cn={0}' by default.
    users_filter: cn={0}
  
    # An additional dn to define the scope of groups
    additional_groups_dn: ou=groups
  
    # The groups filter used for retrieving groups of a given user.
    # {0} is a matcher replaced by username.
    # {dn} is a matcher replaced by user DN.
    # {uid} is a matcher replaced by user uid.
    # 'member={dn}' by default.
    groups_filter: (&(member={dn})(objectclass=groupOfNames))
  
    # The attribute holding the name of the group
    group_name_attribute: cn
  
    # The attribute holding the mail address of the user
    mail_attribute: mail
  
    # The username and password of the admin user.
    user: cn=admin,dc=eideon,dc=com
    password: defaultpass

  # File backend configuration.
  #
  # With this backend, the users database is stored in a file
  # which is updated when users reset their passwords.
  # Therefore, this backend is meant to be used in a dev environment
  # and not in production since it prevents Authelia to be scaled to
  # more than one instance.
  #
  ## file:
  ##   path: ./users_database.yml

# Access Control
#
# For more details about the configuration see config.template.yml at the root of the repo.
access_control:
  default_policy: deny

  rules:
    # Rules applied to everyone
    - domain: '*.eideon.com'
      policy: two_factor

# Configuration of session cookies
# 
# The session cookies identify the user once logged in.
session:
  # The secret to encrypt the session cookie.
  secret: '{{ .Values.authelia_conf.session_secret }}'
  
  # The time in ms before the cookie expires and session is reset.
  expiration: 3600000 # 1 hour

  # The inactivity time in ms before the session is reset.
  inactivity: 300000 # 5 minutes

  # The domain to protect.
  # Note: the authenticator must also be in that domain. If empty, the cookie
  # is restricted to the subdomain of the issuer. 
  domain: eideon.com
  
  # The redis connection details
  redis:
    host: '{{ printf "%s-redis-master.%s.svc.cluster.local" (.Release.Name) (.Release.Namespace) }}'
    port: 6379
    password: defaultpass

# Configuration of the authentication regulation mechanism.
#
# This mechanism prevents attackers from brute forcing the first factor.
# It bans the user if too many attempts are done in a short period of
# time.
regulation:
  # The number of failed login attempts before user is banned. 
  # Set it to 0 for disabling regulation.
  max_retries: 3

  # The length of time between login attempts before user is banned.
  find_time: 120

  # The length of time before a banned user can login again.
  ban_time: 300

# Configuration of the storage backend used to store data and secrets.
#
# You must use only an available configuration: local, mongo
storage:
  # The directory where the DB files will be saved
  # local: /var/lib/authelia/store
  
  # Settings to connect to mongo server
  mongo:
    url: '{{ printf "mongodb://%s-mongodb.%s.svc.cluster.local" (.Release.Name) (.Release.Namespace) }}'
    database: authelia
    auth:
      username: admin
      password: defaultpass

# Configuration of the notification system.
#
# Notifications are sent to users when they require a password reset, a u2f
# registration or a TOTP registration.
# Use only an available configuration: filesystem, gmail
notifier:
  # For testing purpose, notifications can be sent in a file
  # filesystem:
  #   filename: /tmp/authelia/notification.txt

  # Use your email account to send the notifications. You can use an app password.
  # List of valid services can be found here: https://nodemailer.com/smtp/well-known/  
  # email:
  #   username: authelia@gmail.com
  #   password: password
  #   sender: authelia@example.com
  #   service: gmail
  
  # Use a SMTP server for sending notifications
  smtp:
    username: test
    password: password
    secure: false
    host: '{{ printf %s-mailcatcher.%s.svc.cluster.local" (.Release.Name) (.Release.Namespace) }}'
    port: 1025
    sender: admin@example.com
